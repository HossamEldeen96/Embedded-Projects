
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008dc  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064d  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041e  00000000  00000000  00001379  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  00001bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  64:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
	
}

void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
	switch (Copy_u8PortID)
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	39 f1       	breq	.+78     	; 0xbe <DIO_voidSetPinDirection+0x52>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_voidSetPinDirection+0xc>
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	39 f0       	breq	.+14     	; 0x84 <DIO_voidSetPinDirection+0x18>
  76:	08 95       	ret
  78:	83 30       	cpi	r24, 0x03	; 3
  7a:	f1 f1       	breq	.+124    	; 0xf8 <DIO_voidSetPinDirection+0x8c>
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	09 f4       	brne	.+2      	; 0x82 <DIO_voidSetPinDirection+0x16>
  80:	58 c0       	rjmp	.+176    	; 0x132 <DIO_voidSetPinDirection+0xc6>
  82:	08 95       	ret
	{
		case PA:
		if (Copy_u8PinDir)
  84:	44 23       	and	r20, r20
  86:	59 f0       	breq	.+22     	; 0x9e <DIO_voidSetPinDirection+0x32>
		{
			SET_BIT(DDRA,Copy_u8PinID);
  88:	2a b3       	in	r18, 0x1a	; 26
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_voidSetPinDirection+0x28>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	6a 95       	dec	r22
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_voidSetPinDirection+0x24>
  98:	82 2b       	or	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	08 95       	ret
		} 
		else
		{
			CLR_BIT(DDRA,Copy_u8PinID);
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_voidSetPinDirection+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_voidSetPinDirection+0x3a>
  ae:	98 2f       	mov	r25, r24
  b0:	90 95       	com	r25
  b2:	92 23       	and	r25, r18
  b4:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,Copy_u8PinID);
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	89 2b       	or	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret
			
		}
		break;
		case PB:
		
		if (Copy_u8PinDir)
  be:	44 23       	and	r20, r20
  c0:	59 f0       	breq	.+22     	; 0xd8 <DIO_voidSetPinDirection+0x6c>
		{
			SET_BIT(DDRB,Copy_u8PinID);
  c2:	27 b3       	in	r18, 0x17	; 23
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_voidSetPinDirection+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_voidSetPinDirection+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
			
			
		}
		else
		{
			CLR_BIT(DDRB,Copy_u8PinID);
  d8:	27 b3       	in	r18, 0x17	; 23
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_voidSetPinDirection+0x78>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_voidSetPinDirection+0x74>
  e8:	98 2f       	mov	r25, r24
  ea:	90 95       	com	r25
  ec:	92 23       	and	r25, r18
  ee:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,Copy_u8PinID);
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	89 2b       	or	r24, r25
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	08 95       	ret
		}
		break;
		case PC:
		
		if (Copy_u8PinDir)
  f8:	44 23       	and	r20, r20
  fa:	59 f0       	breq	.+22     	; 0x112 <DIO_voidSetPinDirection+0xa6>
		{
			SET_BIT(DDRC,Copy_u8PinID);
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_voidSetPinDirection+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_voidSetPinDirection+0x98>
 10c:	82 2b       	or	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20
 110:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,Copy_u8PinID);
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDirection+0xb2>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDirection+0xae>
 122:	98 2f       	mov	r25, r24
 124:	90 95       	com	r25
 126:	92 23       	and	r25, r18
 128:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,Copy_u8PinID);
 12a:	95 b3       	in	r25, 0x15	; 21
 12c:	89 2b       	or	r24, r25
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret
		}
		break;
		case PD:
		
		if (Copy_u8PinDir)
 132:	44 23       	and	r20, r20
 134:	59 f0       	breq	.+22     	; 0x14c <DIO_voidSetPinDirection+0xe0>
		{
			SET_BIT(DDRD,Copy_u8PinID);
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_voidSetPinDirection+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_voidSetPinDirection+0xd2>
 146:	82 2b       	or	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,Copy_u8PinID);
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_voidSetPinDirection+0xec>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_voidSetPinDirection+0xe8>
 15c:	98 2f       	mov	r25, r24
 15e:	90 95       	com	r25
 160:	92 23       	and	r25, r18
 162:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,Copy_u8PinID);
 164:	92 b3       	in	r25, 0x12	; 18
 166:	89 2b       	or	r24, r25
 168:	82 bb       	out	0x12, r24	; 18
 16a:	08 95       	ret

0000016c <DIO_voidSetPinValue>:
		
	}
}
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
	switch (Copy_u8PortID)
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	19 f1       	breq	.+70     	; 0x1b6 <DIO_voidSetPinValue+0x4a>
 170:	18 f4       	brcc	.+6      	; 0x178 <DIO_voidSetPinValue+0xc>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	39 f0       	breq	.+14     	; 0x184 <DIO_voidSetPinValue+0x18>
 176:	08 95       	ret
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	b1 f1       	breq	.+108    	; 0x1e8 <DIO_voidSetPinValue+0x7c>
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	09 f4       	brne	.+2      	; 0x182 <DIO_voidSetPinValue+0x16>
 180:	4c c0       	rjmp	.+152    	; 0x21a <DIO_voidSetPinValue+0xae>
 182:	08 95       	ret
	{
		case PA:
		if (Copy_u8PinValue)
 184:	44 23       	and	r20, r20
 186:	59 f0       	breq	.+22     	; 0x19e <DIO_voidSetPinValue+0x32>
		{
			SET_BIT(PORTA,Copy_u8PinID);
 188:	2b b3       	in	r18, 0x1b	; 27
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_voidSetPinValue+0x28>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_voidSetPinValue+0x24>
 198:	82 2b       	or	r24, r18
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,Copy_u8PinID);
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_voidSetPinValue+0x3e>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_voidSetPinValue+0x3a>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	08 95       	ret
		}
		break;
		case PB:
		
		if (Copy_u8PinValue)
 1b6:	44 23       	and	r20, r20
 1b8:	59 f0       	breq	.+22     	; 0x1d0 <DIO_voidSetPinValue+0x64>
		{
			SET_BIT(PORTB,Copy_u8PinID);
 1ba:	28 b3       	in	r18, 0x18	; 24
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinValue+0x5a>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinValue+0x56>
 1ca:	82 2b       	or	r24, r18
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,Copy_u8PinID);
 1d0:	28 b3       	in	r18, 0x18	; 24
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x70>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x6c>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret
		}
		break;
		case PC:
		
		if (Copy_u8PinValue)
 1e8:	44 23       	and	r20, r20
 1ea:	59 f0       	breq	.+22     	; 0x202 <DIO_voidSetPinValue+0x96>
		{
			SET_BIT(PORTC,Copy_u8PinID);
 1ec:	25 b3       	in	r18, 0x15	; 21
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_voidSetPinValue+0x8c>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_voidSetPinValue+0x88>
 1fc:	82 2b       	or	r24, r18
 1fe:	85 bb       	out	0x15, r24	; 21
 200:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,Copy_u8PinID);
 202:	25 b3       	in	r18, 0x15	; 21
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_voidSetPinValue+0xa2>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_voidSetPinValue+0x9e>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	85 bb       	out	0x15, r24	; 21
 218:	08 95       	ret
		}
		break;
		case PD:
		
		if (Copy_u8PinValue)
 21a:	44 23       	and	r20, r20
 21c:	59 f0       	breq	.+22     	; 0x234 <DIO_voidSetPinValue+0xc8>
		{
			SET_BIT(PORTD,Copy_u8PinID);
 21e:	22 b3       	in	r18, 0x12	; 18
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinValue+0xbe>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinValue+0xba>
 22e:	82 2b       	or	r24, r18
 230:	82 bb       	out	0x12, r24	; 18
 232:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,Copy_u8PinID);
 234:	22 b3       	in	r18, 0x12	; 18
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_voidSetPinValue+0xd4>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_voidSetPinValue+0xd0>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	82 bb       	out	0x12, r24	; 18
 24a:	08 95       	ret

0000024c <DIO_voidGetBitValue>:


u8 DIO_voidGetBitValue(u8 copy_u8PortID , u8 copy_PinID )
{
	u8 r;
	switch (copy_u8PortID)
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	91 f0       	breq	.+36     	; 0x274 <DIO_voidGetBitValue+0x28>
 250:	18 f4       	brcc	.+6      	; 0x258 <DIO_voidGetBitValue+0xc>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	31 f0       	breq	.+12     	; 0x262 <DIO_voidGetBitValue+0x16>
 256:	29 c0       	rjmp	.+82     	; 0x2aa <DIO_voidGetBitValue+0x5e>
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	a9 f0       	breq	.+42     	; 0x286 <DIO_voidGetBitValue+0x3a>
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	e1 f0       	breq	.+56     	; 0x298 <DIO_voidGetBitValue+0x4c>
 260:	24 c0       	rjmp	.+72     	; 0x2aa <DIO_voidGetBitValue+0x5e>
	{
		case PA:
		r=READ_BIT(PINA,copy_PinID);
 262:	89 b3       	in	r24, 0x19	; 25
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_voidGetBitValue+0x20>
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_voidGetBitValue+0x1c>
 270:	81 70       	andi	r24, 0x01	; 1
		return r;
 272:	08 95       	ret
		break;
		case PB:		
		r=READ_BIT(PINB,copy_PinID);
 274:	86 b3       	in	r24, 0x16	; 22
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_voidGetBitValue+0x32>
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_voidGetBitValue+0x2e>
 282:	81 70       	andi	r24, 0x01	; 1
		return r;
 284:	08 95       	ret
		break;
		case PC:		
		r=READ_BIT(PINC,copy_PinID);
 286:	83 b3       	in	r24, 0x13	; 19
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_voidGetBitValue+0x44>
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_voidGetBitValue+0x40>
 294:	81 70       	andi	r24, 0x01	; 1
		return r;
 296:	08 95       	ret
		break;
		case PD:		
		r=READ_BIT(PIND,copy_PinID);
 298:	80 b3       	in	r24, 0x10	; 16
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_voidGetBitValue+0x56>
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_voidGetBitValue+0x52>
 2a6:	81 70       	andi	r24, 0x01	; 1
		return r;
 2a8:	08 95       	ret
		break;
		
	}
	
 2aa:	08 95       	ret

000002ac <main>:


int main(void)
{
    /* Replace with your application code */
	DIO_voidSetPinDirection(PA,5,1);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	65 e0       	ldi	r22, 0x05	; 5
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PA,6,1);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	66 e0       	ldi	r22, 0x06	; 6
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PD,7,0);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	67 e0       	ldi	r22, 0x07	; 7
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	
	u8 d=1000;
    while (1) 
    {		
		  DIO_voidSetPinValue(PA,5,1);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	65 e0       	ldi	r22, 0x05	; 5
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	83 ed       	ldi	r24, 0xD3	; 211
 2d8:	90 e3       	ldi	r25, 0x30	; 48
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x2e>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x38>
 2e4:	00 00       	nop
		  _delay_ms(1000);
		  DIO_voidSetPinValue(PA,5,0);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	65 e0       	ldi	r22, 0x05	; 5
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_voidSetPinValue>
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	83 ed       	ldi	r24, 0xD3	; 211
 2f4:	90 e3       	ldi	r25, 0x30	; 48
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x4a>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x54>
 300:	00 00       	nop
		  _delay_ms(1000);
		  
		  
		  
		  if (!DIO_voidGetBitValue(PD , 7 ))
 302:	67 e0       	ldi	r22, 0x07	; 7
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_voidGetBitValue>
 30a:	81 11       	cpse	r24, r1
 30c:	0c c0       	rjmp	.+24     	; 0x326 <main+0x7a>
		  {
			  while(DIO_voidGetBitValue(PD , 7 ));
 30e:	67 e0       	ldi	r22, 0x07	; 7
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_voidGetBitValue>
 316:	81 11       	cpse	r24, r1
 318:	fa cf       	rjmp	.-12     	; 0x30e <main+0x62>
			  DIO_voidSetPinValue(PA,6,1);
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	66 e0       	ldi	r22, 0x06	; 6
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_voidSetPinValue>
 324:	d2 cf       	rjmp	.-92     	; 0x2ca <main+0x1e>
		  }
		  else
		  {
			  DIO_voidSetPinValue(PA,6,0);
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	66 e0       	ldi	r22, 0x06	; 6
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_voidSetPinValue>
 330:	cc cf       	rjmp	.-104    	; 0x2ca <main+0x1e>

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
