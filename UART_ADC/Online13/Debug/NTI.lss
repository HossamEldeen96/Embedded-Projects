
NTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000836  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000836  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e11  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a60  00000000  00000000  0000294d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e5e  00000000  00000000  000033ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000508  00000000  00000000  0000420c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ba6  00000000  00000000  00004714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001617  00000000  00000000  000052ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  000068d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_6>
  1c:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_7>
  20:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_8>
  24:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  8a:	0c 94 19 04 	jmp	0x832	; 0x832 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteIns>:
}

#else

static void WriteIns(u8 ins)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,LOW);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
  9e:	c4 fb       	bst	r28, 4
  a0:	66 27       	eor	r22, r22
  a2:	60 f9       	bld	r22, 0
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
  aa:	c5 fb       	bst	r28, 5
  ac:	66 27       	eor	r22, r22
  ae:	60 f9       	bld	r22, 0
  b0:	89 e0       	ldi	r24, 0x09	; 9
  b2:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
  b6:	c6 fb       	bst	r28, 6
  b8:	66 27       	eor	r22, r22
  ba:	60 f9       	bld	r22, 0
  bc:	8a e0       	ldi	r24, 0x0A	; 10
  be:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
  c2:	6c 2f       	mov	r22, r28
  c4:	66 1f       	adc	r22, r22
  c6:	66 27       	eor	r22, r22
  c8:	66 1f       	adc	r22, r22
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteIns+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteIns+0x50>
  e2:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteIns+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteIns+0x64>
  f6:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(D4,READ_BIT(ins,0));
  f8:	6c 2f       	mov	r22, r28
  fa:	61 70       	andi	r22, 0x01	; 1
  fc:	88 e0       	ldi	r24, 0x08	; 8
  fe:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
 102:	c1 fb       	bst	r28, 1
 104:	66 27       	eor	r22, r22
 106:	60 f9       	bld	r22, 0
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
 10e:	c2 fb       	bst	r28, 2
 110:	66 27       	eor	r22, r22
 112:	60 f9       	bld	r22, 0
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,3));
 11a:	c3 fb       	bst	r28, 3
 11c:	66 27       	eor	r22, r22
 11e:	60 f9       	bld	r22, 0
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteIns+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <WriteIns+0xa6>
 138:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <WriteIns+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteIns+0xba>
 14c:	00 00       	nop
	_delay_ms(1);
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <WriteData>:
static void WriteData(u8 data)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,HIGH);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
 15e:	c4 fb       	bst	r28, 4
 160:	66 27       	eor	r22, r22
 162:	60 f9       	bld	r22, 0
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
 16a:	c5 fb       	bst	r28, 5
 16c:	66 27       	eor	r22, r22
 16e:	60 f9       	bld	r22, 0
 170:	89 e0       	ldi	r24, 0x09	; 9
 172:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
 176:	c6 fb       	bst	r28, 6
 178:	66 27       	eor	r22, r22
 17a:	60 f9       	bld	r22, 0
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));	
 182:	6c 2f       	mov	r22, r28
 184:	66 1f       	adc	r22, r22
 186:	66 27       	eor	r22, r22
 188:	66 1f       	adc	r22, r22
 18a:	8c e0       	ldi	r24, 0x0C	; 12
 18c:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
 198:	8f e9       	ldi	r24, 0x9F	; 159
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <WriteData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <WriteData+0x50>
 1a2:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <WriteData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <WriteData+0x64>
 1b6:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(D4,READ_BIT(data,0));
 1b8:	6c 2f       	mov	r22, r28
 1ba:	61 70       	andi	r22, 0x01	; 1
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
 1c2:	c1 fb       	bst	r28, 1
 1c4:	66 27       	eor	r22, r22
 1c6:	60 f9       	bld	r22, 0
 1c8:	89 e0       	ldi	r24, 0x09	; 9
 1ca:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
 1ce:	c2 fb       	bst	r28, 2
 1d0:	66 27       	eor	r22, r22
 1d2:	60 f9       	bld	r22, 0
 1d4:	8a e0       	ldi	r24, 0x0A	; 10
 1d6:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,3));
 1da:	c3 fb       	bst	r28, 3
 1dc:	66 27       	eor	r22, r22
 1de:	60 f9       	bld	r22, 0
 1e0:	8c e0       	ldi	r24, 0x0C	; 12
 1e2:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WriteData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <WriteData+0xa6>
 1f8:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_WritePin>
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <WriteData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <WriteData+0xba>
 20c:	00 00       	nop
	_delay_ms(1);
}
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_Init+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x10>
 222:	00 00       	nop
void LCD_Init(void)
{
	_delay_ms(50);
	WriteIns(0x02);
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
	WriteIns(0x28);
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
	WriteIns(0x0c);  //0x0e  0x0f
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
	WriteIns(0x01);  //clear screen
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 23c:	8f e9       	ldi	r24, 0x9F	; 159
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x2e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x34>
 246:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 24e:	08 95       	ret

00000250 <LCD_GoTo>:

#endif

void LCD_GoTo(u8 line,u8 cell)
{
	if (line==0)
 250:	81 11       	cpse	r24, r1
 252:	05 c0       	rjmp	.+10     	; 0x25e <LCD_GoTo+0xe>
	{
		WriteIns(0x80+cell);
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	86 0f       	add	r24, r22
 258:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 25c:	08 95       	ret
	}
	else if (line==1)
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	29 f4       	brne	.+10     	; 0x26c <LCD_GoTo+0x1c>
	{
		WriteIns(0x80+cell+0x40);
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	86 0f       	add	r24, r22
 266:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 26a:	08 95       	ret
	}
	else if (line==2)
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	21 f4       	brne	.+8      	; 0x278 <LCD_GoTo+0x28>
	{
		WriteIns(0x80+cell+0x40+0x40);
 270:	86 2f       	mov	r24, r22
 272:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 276:	08 95       	ret
	}
	else if (line==3)
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	21 f4       	brne	.+8      	; 0x284 <LCD_GoTo+0x34>
	{
		WriteIns(0x80+cell+0x40+0x40+0x40);
 27c:	80 e4       	ldi	r24, 0x40	; 64
 27e:	86 0f       	add	r24, r22
 280:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 284:	08 95       	ret

00000286 <LCD_WriteChar>:
	}
}

void LCD_WriteChar(u8 ch)
{
	WriteData(ch);
 286:	0e 94 a9 00 	call	0x152	; 0x152 <WriteData>
 28a:	08 95       	ret

0000028c <LCD_WriteString>:
}


void LCD_WriteString(u8*str)
{
 28c:	ef 92       	push	r14
 28e:	ff 92       	push	r15
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	7c 01       	movw	r14, r24
	u8 i;
	
	for (i=0;str[i];i++)
 298:	c0 e0       	ldi	r28, 0x00	; 0
 29a:	0b c0       	rjmp	.+22     	; 0x2b2 <LCD_WriteString+0x26>
	{	if (i==15)
 29c:	cf 30       	cpi	r28, 0x0F	; 15
 29e:	21 f4       	brne	.+8      	; 0x2a8 <LCD_WriteString+0x1c>
	{
		LCD_GoTo(1,0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
	
	}
		LCD_WriteChar(str[i]);
 2a8:	f8 01       	movw	r30, r16
 2aa:	80 81       	ld	r24, Z
 2ac:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WriteChar>

void LCD_WriteString(u8*str)
{
	u8 i;
	
	for (i=0;str[i];i++)
 2b0:	cf 5f       	subi	r28, 0xFF	; 255
 2b2:	87 01       	movw	r16, r14
 2b4:	0c 0f       	add	r16, r28
 2b6:	11 1d       	adc	r17, r1
 2b8:	f8 01       	movw	r30, r16
 2ba:	80 81       	ld	r24, Z
 2bc:	81 11       	cpse	r24, r1
 2be:	ee cf       	rjmp	.-36     	; 0x29c <LCD_WriteString+0x10>
		LCD_GoTo(1,0);
	
	}
		LCD_WriteChar(str[i]);
	}
}
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	08 95       	ret

000002cc <delay_sec>:
	
void delay_sec(u16 t)
 {
    static u16 c;
	u8 i=0,j;
	for (i=0;i<t;i++)
 2cc:	89 2b       	or	r24, r25
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <delay_sec+0xc>
 2d0:	08 95       	ret
	{
		for (j=0;j<7812;j++)
		{
			while (!READ_BIT(TIFR,TOV0))			
			SET_BIT(TIFR,TOV0);				
 2d2:	88 b7       	in	r24, 0x38	; 56
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	88 bf       	out	0x38, r24	; 56
	u8 i=0,j;
	for (i=0;i<t;i++)
	{
		for (j=0;j<7812;j++)
		{
			while (!READ_BIT(TIFR,TOV0))			
 2d8:	08 b6       	in	r0, 0x38	; 56
 2da:	00 fe       	sbrs	r0, 0
 2dc:	fa cf       	rjmp	.-12     	; 0x2d2 <delay_sec+0x6>
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <delay_sec+0xc>

000002e0 <main>:
 }
		

int main()
{
	DIO_Init();
 2e0:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_Init>
	LCD_Init();
 2e4:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	TIMER0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_8);
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 1d 03 	call	0x63a	; 0x63a <TIMER0_Init>
	LCD_GoTo(0,0);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
	LCD_WriteString("TimBB");
 2f8:	8a e8       	ldi	r24, 0x8A	; 138
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_WriteString>


	u8 x=0;
	while(1)
	{  		
		LCD_GoTo(0,0);		
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
		
		LCD_WriteString("jjjj");		
 308:	80 e9       	ldi	r24, 0x90	; 144
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_WriteString>
		delay_sec(2);
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 66 01 	call	0x2cc	; 0x2cc <delay_sec>
 318:	f3 cf       	rjmp	.-26     	; 0x300 <main+0x20>

0000031a <DIO_InitPin>:
	}
}

void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
	u8 Pin_num=pin%8;
 31a:	98 2f       	mov	r25, r24
 31c:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port=pin/8;
 31e:	86 95       	lsr	r24
 320:	86 95       	lsr	r24
 322:	86 95       	lsr	r24
	switch(status)
 324:	61 30       	cpi	r22, 0x01	; 1
 326:	09 f4       	brne	.+2      	; 0x32a <DIO_InitPin+0x10>
 328:	55 c0       	rjmp	.+170    	; 0x3d4 <DIO_InitPin+0xba>
 32a:	20 f0       	brcs	.+8      	; 0x334 <DIO_InitPin+0x1a>
 32c:	62 30       	cpi	r22, 0x02	; 2
 32e:	09 f4       	brne	.+2      	; 0x332 <DIO_InitPin+0x18>
 330:	a1 c0       	rjmp	.+322    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 332:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	c1 f0       	breq	.+48     	; 0x368 <DIO_InitPin+0x4e>
 338:	28 f0       	brcs	.+10     	; 0x344 <DIO_InitPin+0x2a>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	39 f1       	breq	.+78     	; 0x38c <DIO_InitPin+0x72>
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	b9 f1       	breq	.+110    	; 0x3b0 <DIO_InitPin+0x96>
 342:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,Pin_num);
 344:	4a b3       	in	r20, 0x1a	; 26
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_InitPin+0x38>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	9a 95       	dec	r25
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_InitPin+0x34>
 356:	cb 01       	movw	r24, r22
 358:	94 2f       	mov	r25, r20
 35a:	98 2b       	or	r25, r24
 35c:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,Pin_num);
 35e:	9b b3       	in	r25, 0x1b	; 27
 360:	80 95       	com	r24
 362:	89 23       	and	r24, r25
 364:	8b bb       	out	0x1b, r24	; 27
			break;
 366:	08 95       	ret
			case PB:
			SET_BIT(DDRB,Pin_num);
 368:	47 b3       	in	r20, 0x17	; 23
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	b9 01       	movw	r22, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_InitPin+0x5c>
 372:	66 0f       	add	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	9a 95       	dec	r25
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_InitPin+0x58>
 37a:	cb 01       	movw	r24, r22
 37c:	94 2f       	mov	r25, r20
 37e:	98 2b       	or	r25, r24
 380:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,Pin_num);
 382:	98 b3       	in	r25, 0x18	; 24
 384:	80 95       	com	r24
 386:	89 23       	and	r24, r25
 388:	88 bb       	out	0x18, r24	; 24
			break;
 38a:	08 95       	ret
			case PC:
			SET_BIT(DDRC,Pin_num);
 38c:	44 b3       	in	r20, 0x14	; 20
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_InitPin+0x80>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	9a 95       	dec	r25
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_InitPin+0x7c>
 39e:	cb 01       	movw	r24, r22
 3a0:	94 2f       	mov	r25, r20
 3a2:	98 2b       	or	r25, r24
 3a4:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,Pin_num);
 3a6:	95 b3       	in	r25, 0x15	; 21
 3a8:	80 95       	com	r24
 3aa:	89 23       	and	r24, r25
 3ac:	85 bb       	out	0x15, r24	; 21
			break;
 3ae:	08 95       	ret
			case PD:
			SET_BIT(DDRD,Pin_num);
 3b0:	41 b3       	in	r20, 0x11	; 17
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_InitPin+0xa4>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	9a 95       	dec	r25
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_InitPin+0xa0>
 3c2:	cb 01       	movw	r24, r22
 3c4:	94 2f       	mov	r25, r20
 3c6:	98 2b       	or	r25, r24
 3c8:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,Pin_num);
 3ca:	92 b3       	in	r25, 0x12	; 18
 3cc:	80 95       	com	r24
 3ce:	89 23       	and	r24, r25
 3d0:	82 bb       	out	0x12, r24	; 18
			break;
 3d2:	08 95       	ret
			
		}
		break;
		case INFREE:
		switch(port)
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	c1 f0       	breq	.+48     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3d8:	28 f0       	brcs	.+10     	; 0x3e4 <DIO_InitPin+0xca>
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	39 f1       	breq	.+78     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	b9 f1       	breq	.+110    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3e2:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,Pin_num);
 3e4:	4a b3       	in	r20, 0x1a	; 26
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	b9 01       	movw	r22, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_InitPin+0xd8>
 3ee:	66 0f       	add	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	9a 95       	dec	r25
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_InitPin+0xd4>
 3f6:	cb 01       	movw	r24, r22
 3f8:	80 95       	com	r24
 3fa:	94 2f       	mov	r25, r20
 3fc:	98 23       	and	r25, r24
 3fe:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,Pin_num);
 400:	9b b3       	in	r25, 0x1b	; 27
 402:	89 23       	and	r24, r25
 404:	8b bb       	out	0x1b, r24	; 27
			break;
 406:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,Pin_num);
 408:	47 b3       	in	r20, 0x17	; 23
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	b9 01       	movw	r22, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	9a 95       	dec	r25
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	cb 01       	movw	r24, r22
 41c:	80 95       	com	r24
 41e:	94 2f       	mov	r25, r20
 420:	98 23       	and	r25, r24
 422:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,Pin_num);
 424:	98 b3       	in	r25, 0x18	; 24
 426:	89 23       	and	r24, r25
 428:	88 bb       	out	0x18, r24	; 24
			break;
 42a:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,Pin_num);
 42c:	44 b3       	in	r20, 0x14	; 20
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	9a 95       	dec	r25
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	cb 01       	movw	r24, r22
 440:	80 95       	com	r24
 442:	94 2f       	mov	r25, r20
 444:	98 23       	and	r25, r24
 446:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,Pin_num);
 448:	95 b3       	in	r25, 0x15	; 21
 44a:	89 23       	and	r24, r25
 44c:	85 bb       	out	0x15, r24	; 21
			break;
 44e:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,Pin_num);
 450:	41 b3       	in	r20, 0x11	; 17
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	9a 95       	dec	r25
 460:	e2 f7       	brpl	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	cb 01       	movw	r24, r22
 464:	80 95       	com	r24
 466:	94 2f       	mov	r25, r20
 468:	98 23       	and	r25, r24
 46a:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,Pin_num);
 46c:	92 b3       	in	r25, 0x12	; 18
 46e:	89 23       	and	r24, r25
 470:	82 bb       	out	0x12, r24	; 18
			break;
 472:	08 95       	ret
		}
		break;
		case INPULL:
			switch(port)
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	c1 f0       	breq	.+48     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 478:	28 f0       	brcs	.+10     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	39 f1       	breq	.+78     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	b9 f1       	breq	.+110    	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 482:	08 95       	ret
			{
				case PA:
				CLR_BIT(DDRA,Pin_num);
 484:	4a b3       	in	r20, 0x1a	; 26
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	b9 01       	movw	r22, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	9a 95       	dec	r25
 494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	cb 01       	movw	r24, r22
 498:	96 2f       	mov	r25, r22
 49a:	90 95       	com	r25
 49c:	94 23       	and	r25, r20
 49e:	9a bb       	out	0x1a, r25	; 26
				SET_BIT(PORTA,Pin_num);
 4a0:	9b b3       	in	r25, 0x1b	; 27
 4a2:	89 2b       	or	r24, r25
 4a4:	8b bb       	out	0x1b, r24	; 27
				break;
 4a6:	08 95       	ret
				case PB:
				CLR_BIT(DDRB,Pin_num);
 4a8:	47 b3       	in	r20, 0x17	; 23
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	b9 01       	movw	r22, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	9a 95       	dec	r25
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ba:	cb 01       	movw	r24, r22
 4bc:	96 2f       	mov	r25, r22
 4be:	90 95       	com	r25
 4c0:	94 23       	and	r25, r20
 4c2:	97 bb       	out	0x17, r25	; 23
				SET_BIT(PORTB,Pin_num);
 4c4:	98 b3       	in	r25, 0x18	; 24
 4c6:	89 2b       	or	r24, r25
 4c8:	88 bb       	out	0x18, r24	; 24
				break;
 4ca:	08 95       	ret
				case PC:
				CLR_BIT(DDRC,Pin_num);
 4cc:	44 b3       	in	r20, 0x14	; 20
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	9a 95       	dec	r25
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4de:	cb 01       	movw	r24, r22
 4e0:	96 2f       	mov	r25, r22
 4e2:	90 95       	com	r25
 4e4:	94 23       	and	r25, r20
 4e6:	94 bb       	out	0x14, r25	; 20
				SET_BIT(PORTC,Pin_num);
 4e8:	95 b3       	in	r25, 0x15	; 21
 4ea:	89 2b       	or	r24, r25
 4ec:	85 bb       	out	0x15, r24	; 21
				break;
 4ee:	08 95       	ret
				case PD:
				CLR_BIT(DDRD,Pin_num);
 4f0:	41 b3       	in	r20, 0x11	; 17
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	b9 01       	movw	r22, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	9a 95       	dec	r25
 500:	e2 f7       	brpl	.-8      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 502:	cb 01       	movw	r24, r22
 504:	96 2f       	mov	r25, r22
 506:	90 95       	com	r25
 508:	94 23       	and	r25, r20
 50a:	91 bb       	out	0x11, r25	; 17
				SET_BIT(PORTD,Pin_num);
 50c:	92 b3       	in	r25, 0x12	; 18
 50e:	89 2b       	or	r24, r25
 510:	82 bb       	out	0x12, r24	; 18
 512:	08 95       	ret

00000514 <DIO_Init>:
#include "DIO_Cfg.h"
#include "DIO_Private.h" 
extern const DIO_PinStatus_type DIO_PinsStatusArr[TOTAL_PINS];

void DIO_Init(void)
{
 514:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 516:	c0 e0       	ldi	r28, 0x00	; 0
 518:	09 c0       	rjmp	.+18     	; 0x52c <DIO_Init+0x18>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
 51a:	ec 2f       	mov	r30, r28
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	e6 59       	subi	r30, 0x96	; 150
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	60 81       	ld	r22, Z
 524:	8c 2f       	mov	r24, r28
 526:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_InitPin>
extern const DIO_PinStatus_type DIO_PinsStatusArr[TOTAL_PINS];

void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 52a:	cf 5f       	subi	r28, 0xFF	; 255
 52c:	c0 32       	cpi	r28, 0x20	; 32
 52e:	a8 f3       	brcs	.-22     	; 0x51a <DIO_Init+0x6>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
		
	}
}
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <DIO_WritePin>:
}


void DIO_WritePin(DIO_Pin_type pin ,DIO_PinVoltage_type volt)
{
		u8 Pin_num=pin%8;
 534:	98 2f       	mov	r25, r24
 536:	97 70       	andi	r25, 0x07	; 7
		DIO_Port_type port=pin/8;
 538:	86 95       	lsr	r24
 53a:	86 95       	lsr	r24
 53c:	86 95       	lsr	r24
		if (volt==HIGH)
 53e:	61 30       	cpi	r22, 0x01	; 1
 540:	e1 f5       	brne	.+120    	; 0x5ba <DIO_WritePin+0x86>
		{
				switch(port)
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	99 f0       	breq	.+38     	; 0x56c <DIO_WritePin+0x38>
 546:	28 f0       	brcs	.+10     	; 0x552 <DIO_WritePin+0x1e>
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	e9 f0       	breq	.+58     	; 0x586 <DIO_WritePin+0x52>
 54c:	83 30       	cpi	r24, 0x03	; 3
 54e:	41 f1       	breq	.+80     	; 0x5a0 <DIO_WritePin+0x6c>
 550:	08 95       	ret
				{
					case PA:				
					SET_BIT(PORTA,Pin_num);
 552:	4b b3       	in	r20, 0x1b	; 27
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	b9 01       	movw	r22, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_WritePin+0x2c>
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	9a 95       	dec	r25
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_WritePin+0x28>
 564:	cb 01       	movw	r24, r22
 566:	84 2b       	or	r24, r20
 568:	8b bb       	out	0x1b, r24	; 27
					break;
 56a:	08 95       	ret
					case PB:					
					SET_BIT(PORTB,Pin_num);
 56c:	48 b3       	in	r20, 0x18	; 24
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	b9 01       	movw	r22, r18
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_WritePin+0x46>
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	9a 95       	dec	r25
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_WritePin+0x42>
 57e:	cb 01       	movw	r24, r22
 580:	84 2b       	or	r24, r20
 582:	88 bb       	out	0x18, r24	; 24
					break;
 584:	08 95       	ret
					case PC:					
					SET_BIT(PORTC,Pin_num);
 586:	45 b3       	in	r20, 0x15	; 21
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	b9 01       	movw	r22, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_WritePin+0x60>
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	9a 95       	dec	r25
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_WritePin+0x5c>
 598:	cb 01       	movw	r24, r22
 59a:	84 2b       	or	r24, r20
 59c:	85 bb       	out	0x15, r24	; 21
					break;
 59e:	08 95       	ret
					case PD:				
					SET_BIT(PORTD,Pin_num);
 5a0:	42 b3       	in	r20, 0x12	; 18
 5a2:	21 e0       	ldi	r18, 0x01	; 1
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	b9 01       	movw	r22, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_WritePin+0x7a>
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	9a 95       	dec	r25
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_WritePin+0x76>
 5b2:	cb 01       	movw	r24, r22
 5b4:	84 2b       	or	r24, r20
 5b6:	82 bb       	out	0x12, r24	; 18
					break;
 5b8:	08 95       	ret
				}			
		} 
		else
		{
			switch(port)
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	a1 f0       	breq	.+40     	; 0x5e6 <DIO_WritePin+0xb2>
 5be:	28 f0       	brcs	.+10     	; 0x5ca <DIO_WritePin+0x96>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	f9 f0       	breq	.+62     	; 0x602 <DIO_WritePin+0xce>
 5c4:	83 30       	cpi	r24, 0x03	; 3
 5c6:	59 f1       	breq	.+86     	; 0x61e <DIO_WritePin+0xea>
 5c8:	08 95       	ret
			{
				case PA:				
				CLR_BIT(PORTA,Pin_num);
 5ca:	4b b3       	in	r20, 0x1b	; 27
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	b9 01       	movw	r22, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_WritePin+0xa4>
 5d4:	66 0f       	add	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	9a 95       	dec	r25
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_WritePin+0xa0>
 5dc:	cb 01       	movw	r24, r22
 5de:	80 95       	com	r24
 5e0:	84 23       	and	r24, r20
 5e2:	8b bb       	out	0x1b, r24	; 27
				break;
 5e4:	08 95       	ret
				case PB:				
				CLR_BIT(PORTB,Pin_num);
 5e6:	48 b3       	in	r20, 0x18	; 24
 5e8:	21 e0       	ldi	r18, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	b9 01       	movw	r22, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_WritePin+0xc0>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	9a 95       	dec	r25
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_WritePin+0xbc>
 5f8:	cb 01       	movw	r24, r22
 5fa:	80 95       	com	r24
 5fc:	84 23       	and	r24, r20
 5fe:	88 bb       	out	0x18, r24	; 24
				break;
 600:	08 95       	ret
				case PC:				
				CLR_BIT(PORTC,Pin_num);
 602:	45 b3       	in	r20, 0x15	; 21
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	b9 01       	movw	r22, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_WritePin+0xdc>
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	9a 95       	dec	r25
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_WritePin+0xd8>
 614:	cb 01       	movw	r24, r22
 616:	80 95       	com	r24
 618:	84 23       	and	r24, r20
 61a:	85 bb       	out	0x15, r24	; 21
				break;
 61c:	08 95       	ret
				case PD:				
				CLR_BIT(PORTD,Pin_num);
 61e:	42 b3       	in	r20, 0x12	; 18
 620:	21 e0       	ldi	r18, 0x01	; 1
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	b9 01       	movw	r22, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_WritePin+0xf8>
 628:	66 0f       	add	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	9a 95       	dec	r25
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_WritePin+0xf4>
 630:	cb 01       	movw	r24, r22
 632:	80 95       	com	r24
 634:	84 23       	and	r24, r20
 636:	82 bb       	out	0x12, r24	; 18
 638:	08 95       	ret

0000063a <TIMER0_Init>:
{
	Timer1_OCB_Fptr=LocalFptr;
}
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_ICU_Fptr=LocalFptr;
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	69 f0       	breq	.+26     	; 0x658 <TIMER0_Init+0x1e>
 63e:	28 f0       	brcs	.+10     	; 0x64a <TIMER0_Init+0x10>
 640:	82 30       	cpi	r24, 0x02	; 2
 642:	89 f0       	breq	.+34     	; 0x666 <TIMER0_Init+0x2c>
 644:	83 30       	cpi	r24, 0x03	; 3
 646:	b1 f0       	breq	.+44     	; 0x674 <TIMER0_Init+0x3a>
 648:	1b c0       	rjmp	.+54     	; 0x680 <TIMER0_Init+0x46>
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	8f 7b       	andi	r24, 0xBF	; 191
 64e:	83 bf       	out	0x33, r24	; 51
 650:	83 b7       	in	r24, 0x33	; 51
 652:	87 7f       	andi	r24, 0xF7	; 247
 654:	83 bf       	out	0x33, r24	; 51
 656:	14 c0       	rjmp	.+40     	; 0x680 <TIMER0_Init+0x46>
 658:	83 b7       	in	r24, 0x33	; 51
 65a:	80 64       	ori	r24, 0x40	; 64
 65c:	83 bf       	out	0x33, r24	; 51
 65e:	83 b7       	in	r24, 0x33	; 51
 660:	87 7f       	andi	r24, 0xF7	; 247
 662:	83 bf       	out	0x33, r24	; 51
 664:	0d c0       	rjmp	.+26     	; 0x680 <TIMER0_Init+0x46>
 666:	83 b7       	in	r24, 0x33	; 51
 668:	8f 7b       	andi	r24, 0xBF	; 191
 66a:	83 bf       	out	0x33, r24	; 51
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	88 60       	ori	r24, 0x08	; 8
 670:	83 bf       	out	0x33, r24	; 51
 672:	06 c0       	rjmp	.+12     	; 0x680 <TIMER0_Init+0x46>
 674:	83 b7       	in	r24, 0x33	; 51
 676:	80 64       	ori	r24, 0x40	; 64
 678:	83 bf       	out	0x33, r24	; 51
 67a:	83 b7       	in	r24, 0x33	; 51
 67c:	88 60       	ori	r24, 0x08	; 8
 67e:	83 bf       	out	0x33, r24	; 51
 680:	83 b7       	in	r24, 0x33	; 51
 682:	88 7f       	andi	r24, 0xF8	; 248
 684:	83 bf       	out	0x33, r24	; 51
 686:	83 b7       	in	r24, 0x33	; 51
 688:	68 2b       	or	r22, r24
 68a:	63 bf       	out	0x33, r22	; 51
 68c:	08 95       	ret

0000068e <__vector_11>:
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	2f 93       	push	r18
 69a:	3f 93       	push	r19
 69c:	4f 93       	push	r20
 69e:	5f 93       	push	r21
 6a0:	6f 93       	push	r22
 6a2:	7f 93       	push	r23
 6a4:	8f 93       	push	r24
 6a6:	9f 93       	push	r25
 6a8:	af 93       	push	r26
 6aa:	bf 93       	push	r27
 6ac:	ef 93       	push	r30
 6ae:	ff 93       	push	r31
 6b0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <Timer0_OVF_Fptr>
 6b4:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <Timer0_OVF_Fptr+0x1>
 6b8:	e2 30       	cpi	r30, 0x02	; 2
 6ba:	f1 05       	cpc	r31, r1
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <__vector_11+0x32>
 6be:	09 95       	icall
 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=NULLPTR)
 704:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Timer1_OVF_Fptr>
 708:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <Timer1_OVF_Fptr+0x1>
 70c:	e2 30       	cpi	r30, 0x02	; 2
 70e:	f1 05       	cpc	r31, r1
 710:	09 f0       	breq	.+2      	; 0x714 <__vector_9+0x32>
	{
		Timer1_OVF_Fptr();
 712:	09 95       	icall
	}
}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	0f 92       	push	r0
 73e:	11 24       	eor	r1, r1
 740:	2f 93       	push	r18
 742:	3f 93       	push	r19
 744:	4f 93       	push	r20
 746:	5f 93       	push	r21
 748:	6f 93       	push	r22
 74a:	7f 93       	push	r23
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	af 93       	push	r26
 752:	bf 93       	push	r27
 754:	ef 93       	push	r30
 756:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULLPTR)
 758:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Timer1_OCA_Fptr>
 75c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Timer1_OCA_Fptr+0x1>
 760:	e2 30       	cpi	r30, 0x02	; 2
 762:	f1 05       	cpc	r31, r1
 764:	09 f0       	breq	.+2      	; 0x768 <__vector_7+0x32>
	{
		Timer1_OCA_Fptr();
 766:	09 95       	icall
	}
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	7f 91       	pop	r23
 776:	6f 91       	pop	r22
 778:	5f 91       	pop	r21
 77a:	4f 91       	pop	r20
 77c:	3f 91       	pop	r19
 77e:	2f 91       	pop	r18
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <__vector_8>:
ISR(TIMER1_OCB_vect)
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	ef 93       	push	r30
 7aa:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULLPTR)
 7ac:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <Timer1_OCB_Fptr>
 7b0:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <Timer1_OCB_Fptr+0x1>
 7b4:	e2 30       	cpi	r30, 0x02	; 2
 7b6:	f1 05       	cpc	r31, r1
 7b8:	09 f0       	breq	.+2      	; 0x7bc <__vector_8+0x32>
	{
		Timer1_OCB_Fptr();
 7ba:	09 95       	icall
	}
}
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	0f 90       	pop	r0
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	0f 90       	pop	r0
 7da:	1f 90       	pop	r1
 7dc:	18 95       	reti

000007de <__vector_6>:
ISR(TIMER1_ICU_vect)
{
 7de:	1f 92       	push	r1
 7e0:	0f 92       	push	r0
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	0f 92       	push	r0
 7e6:	11 24       	eor	r1, r1
 7e8:	2f 93       	push	r18
 7ea:	3f 93       	push	r19
 7ec:	4f 93       	push	r20
 7ee:	5f 93       	push	r21
 7f0:	6f 93       	push	r22
 7f2:	7f 93       	push	r23
 7f4:	8f 93       	push	r24
 7f6:	9f 93       	push	r25
 7f8:	af 93       	push	r26
 7fa:	bf 93       	push	r27
 7fc:	ef 93       	push	r30
 7fe:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULLPTR)
 800:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 804:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 808:	e2 30       	cpi	r30, 0x02	; 2
 80a:	f1 05       	cpc	r31, r1
 80c:	09 f0       	breq	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	{
		Timer1_ICU_Fptr();
 80e:	09 95       	icall
	}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <_exit>:
 832:	f8 94       	cli

00000834 <__stop_program>:
 834:	ff cf       	rjmp	.-2      	; 0x834 <__stop_program>
